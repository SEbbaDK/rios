WHITESPACE = _{ " "|"\t"|"\n"|"\r" }
COMMENT	= _{
	"/*" ~ (!"*/" ~ ANY)* ~ "*/"
	| ("#"|"//") ~ (!"\n" ~ ANY)* ~ "\n"
}

Program = _{ SOI ~ Decs ~ EOI }
Decs = { Dec* }
Dec = _{ 
	VarDec
    | StateDec
    | ReactDec
    | StructDec
}
ReactDec = _{
    ReactOnenter
    | ReactAlways
    | ReactEvery
    | ReactAfter
    | ReactWhen
}
ReactOnenter= { "onenter" ~ Result }
ReactAlways = { "always" ~ Result }
ReactEvery  = { "every" ~ TimedReact }
ReactAfter  = { "after" ~ TimedReact }
TimedReact  = _{ Expr ~ Unit ~ (Result | ReactWhen) }
ReactWhen   = { "when" ~ Expr ~ (WhenOp? ~ Cases | Result) }
Cases = _{ Case ~ (Cases)* }
Case = { "|" ~ WhenOp? ~ Expr ~ Result }
WhenOp = { CompOp|BoolOp|ChangeOp }
Result = { ":" ~ Stmts }
Unit = { "µs"|"ms"|"s"|"m"|"h"|"d" }

VarDec = { Mutable? ~ Type ~ VarName ~ Params? ~ "=" ~ (Stmts|Expr) }
Mutable = { "mut" }
Params = { "(" ~ (Param ~ ("," ~ Param)*)? ~ ")" }
Param = { Type ~ VarName }
Type = _{ (IntType|BoolType|FloatType|DoubleType|PinType|SerialType|ProcType|StringType|CharType|TimeType) ~ ArrayType? }
IntType     = @{ ("u"? ~ "int" ~ ("8"|"16"|"32"|"64")) }
BoolType    = @{ "bool" }
FloatType   = @{ "float" }
DoubleType  = @{ "double" }
PinType     = { (PinAnalog|PinDigital) ~ "pin" }
SerialType  = @{ "serial" }
ProcType    = @{ "proc" }
StringType  = @{ "string" }
CharType    = @{ "char" }
TimeType    = @{ "time" }
ArrayType   = @{ "[]" }

StateDec = { "default"? ~ "state" ~ StateName ~ "{" ~ Decs ~ "}"  }

StructDec = { "struct" ~ VarName ~ "{" ~ VarDec* ~ "}" }

Stmts = {
	"[" ~ Stmt ~ (";" ~ Stmt?)* ~ "]"
	| Stmt
}
Stmt = {
    Enter
    | Run
    | Assign
	| VarDec
}
Assign = { Expr ~ AssignOp ~ Expr }
AssignOp = _{ (AritOp|BitOp)? ~ "=" }
Enter = { "enter" ~ StateName }
Run = { "run" ~ Expr }

Expr = { ExprBOr }
ExprBOr = { ExprBAnd ~ ( BoolOrOp ~ Expr)? }
ExprBAnd = { ExprBXor ~ ( BoolAndOp ~ Expr)? }
ExprBXor = { ExprComp ~ ( BoolXorOp ~ Expr)? }
ExprComp = { ExprMult ~ ( (CompOp|ChangeOp) ~ Expr)? }
ExprMult = { ExprAdd ~ ( (AritMultOp|AritModOp|AritDivOp|BitAndOp|BitXorOp) ~ Expr)? }
ExprAdd = { ExprShift ~ ( (AritAddOp|AritSubOp|BitOrOp) ~ Expr)? }
ExprShift={ ExprNeg ~ ( (BitShiftLeftOp|BitShiftRightOp) ~ Expr)? }
ExprNeg = { (BoolNegOp|BitNegOp|AritNegOp)? ~ ExprOld }
ExprOld = { (OldOp)? ~ ExprCall }
//ExprSub = { ExprCall ~ ( "." ~ Expr)? }
ExprCall = { ExprDeref  ~ ("(" ~ (Expr  ~ ("," ~ Expr)*)? ~ ")")? }
ExprDeref = { DerefOp? ~ ExprParen }
ExprParen = { 
	"(" ~ Expr ~ ")" 
	| Con
}

Con = ${
	ArrayCon
	| BinCon
	| OctCon
	| HexCon
	| DecCon
	| BoolCon
	| PinCon
	| SerialCon
	| VarName
	| StringCon
}
BinCon = @{ "0b" ~ BinDigit+ ~ ("." ~ BinDigit+)? }
OctCon = @{ "0o" ~ OctDigit+ ~ ("." ~ OctDigit+)? }
HexCon = @{ "0" ~ ("x"|"h") ~ HexDigit+ ~ ("." ~ HexDigit+)? }
DecCon = @{ "0d"? ~ DecDigit+ ~ ("." ~ DecDigit+)? }
BoolCon = @{ "true" | "false" | "high" | "low" }
PinCon = { PinPrefix ~ "@" ~ PinAddress }
PinPrefix = _{ PinPinType? ~ PinDirection }
PinAddress = @{ "A"? ~ DecDigit+ }
PinPinType = { PinAnalog | PinDigital }
PinAnalog  = @{ "a" ~ "nalog"? }
PinDigital = @{ "d" ~ "igital"? }
PinDirection = _{ PinOutput | PinInput ~ PinPullup }
PinOutput = @{ "o" ~ "utput"? }
PinInput = @{ "i" ~ "nput"? }
PinPullup = @{ "p" ~ "ullup"? }
SerialCon = @{ ("usb"|"pin") ~ "$" ~ DecDigit+ }
ArrayCon = !{ "[" ~ Con ~ ("," ~ Con)* ~ ","? ~ "]" }
StringCon = @{ "\"" ~ NotQuote* ~ "\"" }

NotQuote 		= @{ !"\"" ~ ANY }
BinDigit 	= @{ '0'..'1' }
OctDigit 	= @{ '0'..'7' }
DecDigit	= @{ '0'..'9' }
HexDigit	= @{ DecDigit | 'a'..'f' | 'A'..'F' }

Letter		= @{ Lowercase | Uppercase }
Lowercase	= @{ 'a'..'z' | 'à'..'ÿ' }
Uppercase	= @{ 'A'..'Z' | 'À'..'ß' }

VarName		= @{ Lowercase ~ Letter* }
StateName	= @{ Uppercase ~ Letter* }

AritOp = { AritAddOp|AritSubOp|AritMultOp|AritModOp|AritDivOp }
AritAddOp 	= { "+" }
AritSubOp   = { "-" }
AritMultOp	= { "*" }
AritModOp   = { "%" }
AritDivOp   = { "/" }

AritNegOp	= { "-" }
AritPosOp   = { "+" }

BitOp = { BitNegOp|BitAndOp|BitOrOp|BitXorOp|BitShiftRightOp|BitShiftLeftOp }
BitNegOp	= { "~" }
BitAndOp	= { "&" ~ !"&" }
BitOrOp		= { "|" ~ !"|" }
BitXorOp	= { "^" ~ !"^" }
BitShiftRightOp	= { ">>" }
BitShiftLeftOp	= { "<<" }

BoolOp	= { BoolOrOp|BoolAndOp|BoolXorOp|BoolNegOp }
BoolOrOp	= { "||" }
BoolAndOp	= { "&&" }
BoolXorOp	= { "^^" }
BoolNegOp	= { "!" }

CompOp  = { CompEOp|CompNEOp|CompLEOp|CompGEOp|CompLOp|CompGOp }
CompEOp = { "==" }
CompNEOp= { "!=" }
CompLEOp= { "<=" }
CompGEOp= { ">=" }
CompLOp = { "<" }
CompGOp = { ">" }
ChangeOp= { ChangedOp|NotChangedOp }
ChangedOp={ "->" }
NotChangedOp= { "!>" }
OldOp	= { "§" }
DerefOp	= { "*" }
